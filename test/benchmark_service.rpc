// #include <math.h>

// optional %%: marks header section, code above will be copied into begin of generated C++ header
%%

namespace benchmark

struct point3 {
    double x;
    double y;
    double z;
    v32 dummy;
};

service Benchmark {
    fast fast_prime(i32 n | i8 flag);
    fast fast_dot_prod(point3 p1, point3 p2 | double v);
    fast fast_add(i32 a, i32 b | i32 a_add_b);
    fast fast_nop(string);
    prime(i32 n | i8 flag);
    dot_prod(point3 p1, point3 p2 | double v);
    add(i32 a, i32 b | i32 a_add_b);
    nop(string);
};

%%
// optional %%: marks footer section, code below will be copied into end of generated C++ header

namespace benchmark {

inline void BenchmarkService::fast_dot_prod(const point3& p1, const point3& p2, double* v) {
    *v = p1.x * p2.x + p1.y * p2.y + p1.z * p2.z;
}

inline void BenchmarkService::fast_add(const rpc::i32& a, const rpc::i32& b, rpc::i32* a_add_b) {
    *a_add_b = a + b;
}

inline void BenchmarkService::prime(const rpc::i32& n, rpc::i8* flag) {
    return fast_prime(n, flag);
}

inline void BenchmarkService::dot_prod(const point3& p1, const point3& p2, double *v) {
    *v = p1.x * p2.x + p1.y * p2.y + p1.z * p2.z;
}

inline void BenchmarkService::add(const rpc::i32& a, const rpc::i32& b, rpc::i32* a_add_b) {
    *a_add_b = a + b;
}

inline void BenchmarkService::fast_nop(const std::string& str) {
    nop(str);
}

} // namespace benchmark
